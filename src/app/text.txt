api.service.ts: ```
// import { Injectable } from '@angular/core';
// import { HttpClient } from '@angular/common/http';
// import { Observable } from 'rxjs';

// @Injectable({
//   providedIn: 'root',
// })
// export class ApiService {
//   private apiUrl = 'http://localhost:1337/api/todos';

//   constructor(private http: HttpClient) {}

//   getTodos(): Observable<any[]> {
//     async const todos: any = () => {this.http.get<any[]>(this.apiUrl);}
//     console.log(todos);

//     return todos;
//     // return this.http.get<any[]>(this.apiUrl);
//   }
// }

import { Injectable } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Observable, throwError } from 'rxjs';
import { catchError } from 'rxjs/operators';

@Injectable({
  providedIn: 'root',
})
export class ApiService {
  private todoUrl = 'http://localhost:1337/api/todos';
  private categoryUrl = 'http://localhost:1337/api/categories';

  constructor(private http: HttpClient) {}

  // private getHeaders(): HttpHeaders {
  //   const username = 'Ivan';
  //   const email = 'ivrlic@gmail.com';
  //   const password = 'Pass123123';

  // const headers = new HttpHeaders({
  //   'Content-Type': 'application/json',
  //   Authorization: 'Basic ' + btoa(`${username}:${email}:${password}`),
  // });
  // return headers;
  // }

  private getHeaders(): HttpHeaders {
    const token =
      '5f4c76160711732c19f6dfc19eeff85ae78a8fd55068d8717ba34f16a64f466c614d56cef88910fe69bc9e8c3c543eeec5baaf4f1046e493fb026beeddd26714ed67d340164a7f1e6b3831893a8ba01ad6b45439d05a0ef0ccfec3d963fc12f4348b1abf97903462179bca0ddfe3180671744674ce8324d7038735fa9a4cffff';
    return new HttpHeaders({
      Authorization: `Bearer ${token}`,
      'Content-Type': 'application/json',
    });
  }

  getData(apiUrl: string): Observable<any> {
    const headers = this.getHeaders();
    const data = this.http
      .get<any>(`${apiUrl}`, {
        headers,
      })
      .pipe(
        catchError((error) => {
          console.error('Greška prilikom dohvaćanja podataka:', error);
          return throwError(() => new Error('Something went wrong'));
        })
      );
    return data;
  }

  createData(apiUrl: string, data: any): Observable<any> {
    const headers = this.getHeaders();
    return this.http.post<any>(apiUrl, data, { headers }).pipe(
      catchError((error) => {
        console.error('Greška prilikom stvaranja podataka:', error);
        return throwError(() => new Error('Something went wrong'));
      })
    );
  }

  updateData(apiUrl: string, data: any, id: string): Observable<any> {
    const headers = this.getHeaders();
    const url = `${apiUrl}/${id}`;
    return this.http.put<any>(url, data, { headers }).pipe(
      catchError((error) => {
        console.error('Greška prilikom ažuriranja podataka:', error);
        return throwError(() => new Error('Something went wrong'));
      })
    );
  }

  deleteData(apiUrl: string, id: string): Observable<any> {
    const headers = this.getHeaders();
    const url = `${apiUrl}/${id}`;
    return this.http.delete<any>(url, { headers }).pipe(
      catchError((error) => {
        console.error('Greška prilikom brisanja podataka:', error);
        return throwError(() => new Error('Something went wrong'));
      })
    );
  }

  // Ostale metode za slanje HTTP zahtjeva...
}

```





todo-list.component.ts: ```
import { Component, OnInit } from '@angular/core';
import { BreakpointObserver, Breakpoints } from '@angular/cdk/layout';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';
import { ApiService } from '../services/api.service';

@Component({
  selector: 'app-todo-list',
  templateUrl: './todo-list.component.html',
  styleUrls: ['./todo-list.component.css'],
})
export class TodoListComponent implements OnInit {
  // ??? za responzivnost ????
  cols: Observable<number>;

  todos: any[] = [];

  constructor(
    private breakpointObserver: BreakpointObserver,
    private apiService: ApiService
  ) {
    this.cols = this.breakpointObserver
      .observe([Breakpoints.Small, Breakpoints.Medium, Breakpoints.Large])
      .pipe(
        map((result) => {
          if (result.breakpoints[Breakpoints.Small]) {
            return 1;
          }
          if (result.breakpoints[Breakpoints.Medium]) {
            return 2;
          }
          return 3;
        })
      );
  }

  ngOnInit(): void {
    this.getTodos();
  }

  getTodos() {
    this.apiService.getTodos().subscribe({
      next: (todos: any) => {
        todos = todos.data;
      },
      error: (error) => {
        console.log('Error fetching todos: ', error);
      },
    });
  }
}

```





todo-list.component.html: ```
<p>todo-list works!</p>

<mat-grid-list [cols]="cols | async" rowHeight="200px">
  <!-- <mat-grid-tile *ngFor="let todo of todos"> -->
  <!-- <app-todo-item></app-todo-item> -->
  <!-- </mat-grid-tile> -->
  <mat-grid-tile>
    <!-- <app-todo-item></app-todo-item> -->
    <!-- <app-todo-item></app-todo-item>
    <app-todo-item></app-todo-item> -->

    <!-- Vaš sadržaj ovdje -->
  </mat-grid-tile>
</mat-grid-list>

```





todo-item.component.ts: ```
import { Component } from '@angular/core';

@Component({
  selector: 'app-todo-item',
  templateUrl: './todo-item.component.html',
  styleUrls: ['./todo-item.component.css'],
})
export class TodoItemComponent {
  // @Input() todo: any; // Pretpostavljeni tip podataka za todo item

  getPriorityClass(priority: string): string {
    switch (priority) {
      case 'urgent':
        return 'urgent-priority';
      case 'medium':
        return 'medium-priority';
      case 'low':
        return 'low-priority';
      default:
        return '';
    }
  }
}

```





todo-item.component.html: ```
<mat-card class="todo-item" [ngClass]="getPriorityClass('urgent')">
  <mat-checkbox class="checkbox"></mat-checkbox>
  <div class="content">
    <div class="title">Kupi mliko</div>
    <div class="description">
      {{
        "Kupi neko dobro svježe da je na akciji i jako dobro i ukusno i svježe i zdravo"
          | slice : 0 : 30
      }}
    </div>
    <div class="details">
      <div class="category">Općenito</div>
      <div class="date">{{ 13.8.2993 | date }}</div>
    </div>
    <div class="actions">
      <button mat-icon-button aria-label="Edit">
        <mat-icon>edit</mat-icon>
      </button>
      <button mat-icon-button aria-label="Delete">
        <mat-icon>delete</mat-icon>
      </button>
    </div>
  </div>
</mat-card>

```





todo-form.component.ts: ```
import { Component } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { DatePipe } from '@angular/common';

@Component({
  selector: 'app-todo-form',
  templateUrl: './todo-form.component.html',
  styleUrls: ['./todo-form.component.css'],
})
export class TodoFormComponent {
  todoForm: FormGroup;
  formattedDate: string | null;
  categoryArray = ['General', 'Work', 'Family', 'Fun'];

  constructor(private fb: FormBuilder, private datePipe: DatePipe) {
    this.todoForm = this.fb.group({
      title: ['', [Validators.required, Validators.maxLength(50)]],
      description: ['', [Validators.required, Validators.maxLength(200)]],
      priority: ['', Validators.required],
      category: ['', Validators.required],
      dueDate: ['', Validators.required],
    });

    const date = new Date();
    this.formattedDate = this.datePipe.transform(date, 'MM/dd/yyyy');
  }

  // constructor(private datePipe: DatePipe) {
  //   // Postavite datum koji želite formatirati
  //   const date = new Date();
  //   this.formattedDate = this.datePipe.transform(date, 'MM/dd/yyyy');
  // }

  createTodo() {
    if (this.todoForm.valid) {
      // Ovdje dodajte logiku za stvaranje novog zadatka
      console.log('New todo created!', this.todoForm.value);
    } else {
      console.log('Form is invalid');
    }
  }
}

```





todo-form.component.html: ```
<mat-card>
  <mat-card-header fxLayout="row" fxLayoutAlign="center">
    <mat-card-title>New Todo</mat-card-title>
  </mat-card-header>
  <mat-card-content>
    <form [formGroup]="todoForm">
      <mat-form-field>
        <mat-label>Title</mat-label>
        <input matInput formControlName="title" placeholder="Title" />
        <mat-error
          *ngIf="
            todoForm.get('title')?.invalid && todoForm.get('title')?.touched
          "
          >Title is required and must be max 50 characters</mat-error
        >
      </mat-form-field>
      <mat-form-field>
        <mat-label>Description</mat-label>
        <textarea
          matInput
          formControlName="description"
          placeholder="Description"
        ></textarea>
        <mat-error
          *ngIf="
            todoForm.get('description')?.invalid &&
            todoForm.get('description')?.touched
          "
          >Description is required and must be max 200 characters</mat-error
        >
      </mat-form-field>
      <mat-form-field>
        <mat-label>Priority</mat-label>
        <mat-select formControlName="priority" placeholder="Priority">
          <mat-option value="high">High</mat-option>
          <mat-option value="medium">Medium</mat-option>
          <mat-option value="low">Low</mat-option>
        </mat-select>
        <mat-error
          *ngIf="
            todoForm.get('priority')?.invalid &&
            todoForm.get('priority')?.touched
          "
          >Priority is required</mat-error
        >
      </mat-form-field>

      <mat-form-field>
        <mat-label>Category</mat-label>
        <mat-select formControlName="category" placeholder="Category">
          <mat-option *ngFor="let category of categoryArray" [value]="category">
            {{ category }}
          </mat-option>
        </mat-select>
        <!-- <mat-select formControlName="category" placeholder="Category">
          <mat-option value="general">General</mat-option>
          <mat-option value="work">Work</mat-option>
          <mat-option value="family">Family</mat-option>
        </mat-select> -->
        <mat-error
          *ngIf="
            todoForm.get('category')?.invalid &&
            todoForm.get('category')?.touched
          "
          >Category is required</mat-error
        >
      </mat-form-field>

      <mat-form-field>
        <input
          matInput
          [matDatepicker]="picker"
          formControlName="dueDate"
          placeholder="Choose a due date"
        />
        <mat-datepicker-toggle matSuffix [for]="picker"></mat-datepicker-toggle>
        <mat-datepicker #picker></mat-datepicker>
        <mat-error
          *ngIf="
            todoForm.get('dueDate')?.invalid && todoForm.get('dueDate')?.touched
          "
          >Due date is required</mat-error
        >
      </mat-form-field>
    </form>
  </mat-card-content>
  <mat-card-actions fxLayout="row" fxLayoutAlign="space-between">
    <button mat-raised-button color="primary">Cancel</button>
    <button
      mat-raised-button
      color="primary"
      (click)="createTodo()"
      [disabled]="todoForm.invalid"
    >
      Create
    </button>
  </mat-card-actions>
</mat-card>

```





navigation.component.ts: ```
import { Component, HostListener } from '@angular/core';
import {
  trigger,
  state,
  style,
  animate,
  transition,
} from '@angular/animations';
import { desktopScreen } from '../const/const-screen-width';

@Component({
  selector: 'app-navigation',
  templateUrl: './navigation.component.html',
  styleUrls: ['./navigation.component.css'],
  animations: [
    trigger('openClose', [
      state(
        'open',
        style({
          transform: 'translateX(0)',
        })
      ),
      state(
        'closed',
        style({
          transform: 'translateX(-100%)',
        })
      ),
      transition('open => closed', [animate('0.15s')]),
      transition('closed => open', [animate('0.2s')]),
    ]),
  ],
})
export class NavigationComponent {
  showNavigation: boolean = false;
  screenWidth!: number;
  // desktopScreen: number = 800;

  ngOnInit() {
    this.screenWidth = window.innerWidth;
    this.checkScreenWidth();
  }

  @HostListener('window:resize', ['$event'])
  onResize(event: Event) {
    this.screenWidth = window.innerWidth;
    this.checkScreenWidth();
  }

  checkScreenWidth() {
    if (this.screenWidth >= desktopScreen) {
      this.showNavigation = true;
    } else {
      this.showNavigation = false;
    }
  }

  toggleNavigation() {
    if (this.screenWidth < desktopScreen) {
      this.showNavigation = !this.showNavigation;
    }
  }

  // close navigationif clicked outside of nav btn and navigaton cont
  @HostListener('document:click', ['$event'])
  onClick(event: Event) {
    if (
      this.showNavigation === true &&
      event.target &&
      !(event.target as HTMLElement).closest('.side-nav-cont') &&
      !(event.target as HTMLElement).closest('.show-nav-btn') &&
      this.screenWidth < desktopScreen
    ) {
      this.showNavigation = false;
    }
  }
}

```





navigation.component.html: ```
<mat-toolbar color="primary" class="header">
  <button mat-icon-button (click)="toggleNavigation()" class="show-nav-btn">
    <mat-icon
      [ngClass]="{ 'open-nav-icon': showNavigation }"
      class="show-nav-icon"
      aria-label="menu"
    >
      menu
    </mat-icon>
  </button>
  <span>Todo list</span>
</mat-toolbar>

<mat-toolbar
  *ngIf="showNavigation"
  [@openClose]="showNavigation ? 'open' : 'closed'"
  class="side-nav-cont"
>
  <!-- First section -->
  <div class="greet-cont">
    <mat-icon class="profile-img">person</mat-icon>
    <p class="greet-text">Good day, my dear!</p>
  </div>

  <!-- Second section -->
  <div class="tasks-cont">
    <button mat-raised-button>New task<mat-icon>add</mat-icon></button>
    <mat-nav-list>
      <mat-list-item>TODAY</mat-list-item>
      <mat-list-item>UPCOMING</mat-list-item>
      <mat-list-item>OVERDUE</mat-list-item>
      <mat-list-item>UNCOMPLETED</mat-list-item>
      <mat-list-item>COMPLETED</mat-list-item>
    </mat-nav-list>
  </div>

  <!-- Third section -->
  <div class="category-cont">
    <button mat-raised-button>Add category<mat-icon>add</mat-icon></button>
    <mat-nav-list>
      <mat-list-item>CATEGORY 1</mat-list-item>
      <mat-list-item>CATEGORY 2</mat-list-item>
      <mat-list-item>CATEGORY 3</mat-list-item>
      <mat-list-item>CATEGORY 4</mat-list-item>
      <!-- <mat-list-item *ngFor="let category of existingCategories">{{ category }}</mat-list-item> -->
    </mat-nav-list>
  </div>
</mat-toolbar>

```



