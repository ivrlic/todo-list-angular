1. pitanje:
```
<div class="list-cont" >
  <h1>todo-list works!</h1>

  <ul>
    <li *ngFor="let todo of todos">
      <app-todo-item
        [todo]="todo"
        (itemChanged)="toggleItemChanged($event)"
        (isEdittedEvent)="toggleEditMode($event)"
        (currentTodoEvent)="getCurrentTodoEvent($event)"
      ></app-todo-item>
    </li>
  </ul>
</div>

<app-edit-todo-form [currentTodo]="currentTodo"></app-edit-todo-form>
```
ng if pojavljivanje jednog ili drugog

možeš li staviti da se pojavljuje list-cont ako je isEditMode===false ili  app-edit-todo-form ako je isEditMode===true




******************************************************************
2. pitanje sredit datum:

Možeš li uz pomoć ovog komentara i prijedloga rješenja popravit moj problem s datumom da mi se ne pokazuje dan ranije od odabranog datuma nego dan koji sam odabrao.
"
When we choose a date in the date picker, the selection is stored and manipulated in GMT (according to Greenwich timezone) time, but displayed back to the user in the formatted representation, taking into account user's current timezone. So stored and displayed dates are different (except of the users within timezone +0, like Greenwich).

When stringifying JS Date object, we get clear Greenwich timezone time, we can see it at https://time.is/GMT. What you probably expect to see is time representation formatted with your current timezone. See difference in my example.

// get current time
let date = new Date();
console.log('NATIVE JS DATE TIME', date.toString());
console.log('STRINGIFIED TIME', JSON.stringify(date));
console.log('FORMATTED TIME', `${date.getHours()}:${date.getMinutes()}:${date.getSeconds()}`);
Expand snippet
you can use very convenient moment's format() function for displaying date.


Thanks @Andriy ! Yes, it's Greenwich time actually instead of a bug of Material Datepicker. When I use moment to format that date returned by Datepicker, it's the right date. – 
Softhinker.com
"

Kod je sljedeći:
todo-form.component.ts: ```
import { Component, EventEmitter, OnInit, Output, Input } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { DatePipe } from '@angular/common';
import { ApiService } from '../services/api.service';

@Component({
  selector: 'app-todo-form',
  templateUrl: './todo-form.component.html',
  styleUrls: ['./todo-form.component.css'],
})
export class TodoFormComponent implements OnInit {
  @Output() showTodoFormEvent = new EventEmitter<boolean>();
  @Output() showTodoListEvent = new EventEmitter<boolean>();
  // @Input() isEditMode!: boolean;
  @Input() currentTodo!: any;

  todoForm: FormGroup;
  formattedDate: string | null;
  categories: any[] = [];

  constructor(
    private fb: FormBuilder,
    private datePipe: DatePipe,
    private apiService: ApiService
  ) {
    this.todoForm = this.fb.group({
      title: ['', [Validators.required, Validators.maxLength(50)]],
      description: ['', [Validators.required, Validators.maxLength(200)]],
      priority: ['', Validators.required],
      category: ['', Validators.required],
      dueDate: ['', Validators.required],
    });

    const date = new Date();
    this.formattedDate = this.datePipe.transform(date, 'MM/dd/yyyy');
  }

  ngOnInit(): void {
    this.getCategories();

    // if (this.isEditMode) {
    //   this.setFormValues();
    // } else {
    //   this.todoForm.reset();
    // }
  }

  // // setting values of formular for edit mode
  // private setFormValues(): void {
  //   this.todoForm.patchValue({
  //     title: this.currentTodo.attributes.title,
  //     description: this.currentTodo.attributes.description,
  //     priority: this.currentTodo.attributes.priority,
  //     dueDate: this.currentTodo.attributes.dueDate,
  //     category: [this.currentTodo.attributes.category.data.id],
  //   });
  // }
  // currentTodo.attributes.description

  // close todo form and open todo list
  handleCancelBtn() {
    this.showTodoFormEvent.emit(false);
    this.showTodoListEvent.emit(true);
    this.scrollToTop();
    // this.isEditMode = false;
    this.todoForm.reset();
  }

  // create new or edit todo, close todo form and open todo list
  handleConfirmBtn(): void {
    if (this.todoForm.valid) {
      // if (this.isEditMode) {
      //   this.updateTodo();
      // } else {
      this.createTodo();
      // }
      this.showTodoFormEvent.emit(false);
      this.showTodoListEvent.emit(true);
      this.scrollToTop();
      // this.isEditMode = false;
      // this.todoForm.reset();
    } else {
      console.log('Form is invalid');
    }
  }

  // creating todo using api, posting it to backend
  createTodo() {
    const newTodo = {
      data: {
        title: this.todoForm.get('title')?.value,
        description: this.todoForm.get('description')?.value,
        priority: this.todoForm.get('priority')?.value,
        dueDate: this.todoForm.get('dueDate')?.value,
        category: [this.todoForm.value.category.id],
      },
    };

    this.apiService.createTodo(newTodo).subscribe({
      next: (response) => {
        console.log('Todo successfuly created:', response);
      },
      error: (error) => {
        console.error('Error while creating todo:', error);
      },
    });
  }

  // updateTodo() {
  //   const updatedTodoId = this.currentTodo.id;
  //   const updatedTodo = {
  //     data: {
  //       title: this.todoForm.get('title')?.value,
  //       description: this.todoForm.get('description')?.value,
  //       priority: this.todoForm.get('priority')?.value,
  //       dueDate: this.todoForm.get('dueDate')?.value,
  //       // // category: [this.todoForm.value.category.id],
  //       // category: [this.currentTodo.attributes.category.data.id],
  //       // category: [this.currentTodo.attributes.category.data.id],
  //     },
  //   };

  //   // console.log(this.todoForm.value);
  //   // console.log(this.todoForm.get('category')?.value[0]);
  //   // console.log(this.todoForm.value.category.id);

  //   this.apiService.updateTodo(updatedTodo, updatedTodoId).subscribe({
  //     next: (response) => {
  //       console.log('Todo successfuly created:', response);
  //     },
  //     error: (error) => {
  //       console.error('Error while creating todo:', error);
  //     },
  //   });
  // }

  // getting categories from the api (upper case)
  getCategories() {
    this.apiService.getCategories().subscribe({
      next: (response) => {
        this.categories = response.data;
      },
      error: (error) => {
        console.error('Error fetching categories:', error);
      },
    });
  }

  scrollToTop() {
    window.scrollTo({
      top: 0,
    });
  }
}

```

todo-form.component.html: ```
<div class="form-cont">
  <mat-card>
    <mat-card-header fxLayout="row" fxLayoutAlign="center">
      <mat-card-title>New Todo</mat-card-title>
    </mat-card-header>
    <mat-card-content>
      <form [formGroup]="todoForm">
        <mat-form-field>
          <mat-label>Title</mat-label>
          <input matInput formControlName="title" placeholder="Title" />
          <mat-error
            *ngIf="
              todoForm.get('title')?.invalid && todoForm.get('title')?.touched
            "
            >Title is required and must be max 50 characters</mat-error
          >
        </mat-form-field>
        <mat-form-field>
          <mat-label>Description</mat-label>
          <textarea
            matInput
            formControlName="description"
            placeholder="Description"
          ></textarea>
          <mat-error
            *ngIf="
              todoForm.get('description')?.invalid &&
              todoForm.get('description')?.touched
            "
            >Description is required and must be max 200 characters</mat-error
          >
        </mat-form-field>
        <mat-form-field>
          <mat-label>Priority</mat-label>
          <mat-select formControlName="priority" placeholder="Priority">
            <mat-option value="high">High</mat-option>
            <mat-option value="medium">Medium</mat-option>
            <mat-option value="low">Low</mat-option>
          </mat-select>
          <mat-error
            *ngIf="
              todoForm.get('priority')?.invalid &&
              todoForm.get('priority')?.touched
            "
            >Priority is required</mat-error
          >
        </mat-form-field>

        <mat-form-field>
          <mat-label>Category</mat-label>
          <mat-select formControlName="category" placeholder="Category">
            <mat-option *ngFor="let category of categories" [value]="category">
              {{ category.attributes.title.toUpperCase() }}
            </mat-option>
          </mat-select>
          <mat-error
            *ngIf="
              todoForm.get('category')?.invalid &&
              todoForm.get('category')?.touched
            "
            >Category is required</mat-error
          >
        </mat-form-field>

        <mat-form-field>
          <input
            class="date-input"
            matInput
            [matDatepicker]="picker"
            formControlName="dueDate"
            placeholder="Choose a due date"
          />
          <mat-datepicker-toggle
            matSuffix
            [for]="picker"
          ></mat-datepicker-toggle>
          <mat-datepicker #picker></mat-datepicker>
          <mat-error
            *ngIf="
              todoForm.get('dueDate')?.invalid &&
              todoForm.get('dueDate')?.touched
            "
            >Due date is required</mat-error
          >
        </mat-form-field>
      </form>
    </mat-card-content>
    <mat-card-actions fxLayout="row" fxLayoutAlign="space-between">
      <button mat-raised-button color="primary" (click)="handleCancelBtn()">
        Cancel
      </button>
      <button
        mat-raised-button
        color="primary"
        (click)="handleConfirmBtn()"
        [disabled]="todoForm.invalid"
      >
        Create
      </button>
    </mat-card-actions>
  </mat-card>
</div>

```